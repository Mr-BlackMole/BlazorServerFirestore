@page "/fetchdata"
@using Google.Cloud.Firestore
@using BlazorServerFirestore.Data
@implements IDisposable
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (people.Count == 0)
{
    <p>No people</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First</th>
                <th>Middle</th>
                <th>Last</th>
                <th>Born</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.First</td>
                    <td>@person.Middle</td>
                    <td>@person.Last</td>
                    <td>@person.BirthYear</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Person> people = new List<Person>();
    private FirestoreChangeListener firestoreChangeListener;

    protected override async Task OnInitializedAsync()
    {
        string project = "blazorserverfirestore";
        FirestoreDb db = FirestoreDb.Create(project);
        Console.WriteLine("Created Cloud Firestore client with project ID: {0}", project);
    
        DocumentReference docRef = db.Collection("users").Document("alovelace");
            Dictionary<string, object> user = new Dictionary<string, object>
            {
            { "First", "Ada" },
            { "Last", "Lovelace" },
            { "Born", 1815 }
        };
        await docRef.SetAsync(user);
        
        docRef = db.Collection("users").Document("aturing");
            user = new Dictionary<string, object>
            {
            { "First", "Alan" },
            { "Middle", "Mathison" },
            { "Last", "Turing" },
            { "Born", 1912 }
        };
        await docRef.SetAsync(user);
        
        firestoreChangeListener = db.Collection("users")
            .Listen(async (snapshot) =>
            {
                people.Clear();
                people.AddRange(snapshot.Documents.Select(d => d.ConvertTo<Person>()));
                await InvokeAsync(() => StateHasChanged());
            });
    }

    public void Dispose()
    {
        firestoreChangeListener?.StopAsync();
    }

    [FirestoreData]
    public class Person
    {
        [FirestoreProperty]
        public string First { get; set; }
  
      [FirestoreProperty]
        public string Middle { get; set; }
 
       [FirestoreProperty]
        public string Last { get; set; }
    
    [FirestoreProperty("Born")]
        public int BirthYear { get; set; }
    }
}
