@page "/"
@using Google.Cloud.Firestore
@using BlazorServerFirestore.Data
@implements IDisposable
@inject FirestoreDb firestoreDb

<h1>Todo's</h1>

@if (taskLists.Count == 0)
{
    <p>No todo lists</p>
}
else
{
    <div class="task-lists">
    @foreach (var taskList in taskLists)
    {
        <span>@taskList.Name</span>
        @if(taskList.Tasks == null || taskList.Tasks.Count == 0)
        {
            <p>List is empty</p>
        }
        else
        {
            <ul class="task-list">
                @foreach(var task in taskList.Tasks.OrderBy(t => t.IsDone))
                {
                    <li class="task @(task.IsDone ? "task--done" : "")">@task.Content</li>
                }
            </ul>
        }
    }
    </div>
}

@code {
    private List<TaskList> taskLists = new List<TaskList>();
    private FirestoreChangeListener firestoreChangeListener;

    protected override void OnInitialized()
    {
        firestoreChangeListener = firestoreDb.Collection("taskLists")
            .Listen(async (snapshot) =>
            {
                taskLists.Clear();
                taskLists.AddRange(snapshot.Documents.Select(d => d.ConvertTo<TaskList>()));
                await InvokeAsync(() => StateHasChanged());
            });
    }

    public void Dispose()
    {
        firestoreChangeListener?.StopAsync();
    }
}
