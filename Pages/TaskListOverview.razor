@page "/"
@using Google.Cloud.Firestore
@using BlazorServerFirestore.Data
@implements IDisposable
@inject FirestoreDb firestoreDb

<h1>Todo lists
    <NavLink href=@($"/create") title="create todo list"><span class="oi oi-plus" title="edit"></span></NavLink>
</h1>

@if (taskLists.Count == 0)
{
    <p>No todo lists</p>
}
else
{
    <div class="card-columns">
    @foreach (var taskList in taskLists)
    {
        <div class="card">
            <div class="card-header">@taskList.Name
                <NavLink href=@($"/edit/{taskList.Reference.Id}") class="float-right"><span class="oi oi-pencil" title="edit"></span></NavLink>
            </div>
            <ul class="list-group list-group-flush">
            @if(taskList.Tasks == null || taskList.Tasks.Count == 0)
            {
                <li class="list-group-item">List is empty</li>
            }
            else
            {
                @foreach(var task in taskList.Tasks.Where(t => !t.IsDone))
                {
                    <li class="list-group-item">@task.Content</li>
                }
                @foreach(var task in taskList.Tasks.Where(t => t.IsDone))
                {
                    <li class="list-group-item"><s>@task.Content</s></li>
                }
            }
            </ul>
        </div>
    }
    </div>
}

@code {
    private List<TaskList> taskLists = new List<TaskList>();
    private FirestoreChangeListener firestoreChangeListener;

    protected override void OnInitialized()
    {
        firestoreChangeListener = firestoreDb.Collection("taskLists")
            .Listen(async (snapshot) =>
            {
                taskLists.Clear();
                taskLists.AddRange(snapshot.Documents.Select(d => d.ConvertTo<TaskList>()));
                await InvokeAsync(() => StateHasChanged());
            });
    }

    public void Dispose()
    {
        firestoreChangeListener?.StopAsync();
    }
}
